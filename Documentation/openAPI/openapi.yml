openapi: 3.0.3
info:
  title: Seasonnal workers - API
  description: The description of the API of the Seasonnal workers project supervised by Mr. Chouki Tibermacine at Poytech School.
  version: 1.0.0
tags:
  - name: Profile
    description: CRUD operations on seasonnal worker profile
  - name: Media
    description: Everything related to media
  - name: Availability
    description: Everything related to seasonnal workers availabilities
  - name: Reference
    description: Everything related to seasonnal workers references
  - name: Experience
    description: Everything related to seasonnal workers experiences
  - name: Feedback
    description: Everything related to seasonnal workers feedbacks
  - name: Job Offers
    description: Everything related to job Offers
  - name: Messaging
    description: Everything related to messaging
  - name: Notification
    description: Everything related to notifications
  - name: Job
    description: Everything related to jobs
  - name: Company
    description: Everything related to companies
servers:
  - url: http://localhost:3000/api/v1
    description: local server
paths:
  # Profile
  /user:
    get:
      tags:
        - Profile
      summary: Get the logged-in Seasonnal worker Profile data.
      description: Can only be used by logged-in users.
      operationId: getSeasonnalProfile
      responses:
        "200":
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: Seasonnal worker with specify id not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "401":
          description: Seasonnal worker is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
    put:
      tags:
        - Profile
      summary: Update the logged-in Profile.
      description: Can only be used by logged-in users.
      operationId: UpdateSeasonnalProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Seasonnal  worker profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
    delete:
      tags:
        - Profile
      summary: Delete the logged-in Profile.
      description: Can only be used by logged-in users.
      operationId: DeleteSeasonnalProfile
      responses:
        "200":
          description: Profile deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessfullyDeleted"
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
    post:
      tags:
        - Profile
      summary: Create a new Profile.
      description: Can only be used by logged-in users.
      operationId: CreateSeasonnalProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: Profile created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
  # Media
  /user/media:
    post:
      tags:
        - Media
      summary: Set the logged-in seasonnal worker Media file as picture and CV.
      description: Can only be used by logged-in users.
      operationId: CreateMedia
      requestBody:
        content:
          application/*:
            schema:
              $ref: "#/components/schemas/Media"
      responses:
        "201":
          description: User CV created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessfullyCreated"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
    put:
      tags:
        - Media
      summary: Update the logged-in seasonnal worker Media file as picture and CV.
      description: Can only be used by logged-in users.
      operationId: UpdateMedia
      requestBody:
        content:
          application/*:
            schema:
              $ref: "#/components/schemas/Media"
      responses:
        "202":
          description: User CV updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessfullyUpdated"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
  /user/media/cv:
    get:
      tags:
        - Media
      summary: Get the logged-in user CV file.
      description: Can only be used by logged-in users.
      operationId: getCV
      responses:
        "200":
          description: Seasonnal worker CV retrieved successfully
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"
    delete:
      tags:
        - Media
      summary: Delete the logged-in user CV file.
      description: Can only be used by logged-in users.
      operationId: deleteCV
      responses:
        "200":
          description: User CV deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessfullyDeleted"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"
  /user/media/picture:
    get:
      tags:
        - Media
      summary: Get the logged-in Profile picture.
      description: Can only be used by logged-in users.
      operationId: getPicture
      responses:
        "200":
          description: Seasonnal worker profile picture retrieved successfully
          content:
            application/pdf:
              schema:
                type: string
                format: binary
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"

    delete:
      tags:
        - Media
      summary: Delete the logged-in Profile picture.
      description: Can only be used by logged-in users.
      operationId: deletePicture
      responses:
        "200":
          description: Profile picture deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessfullyDeleted"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"
  # Availabilities
  /user/availability:
    post:
      tags:
        - Availability
      summary: Create a new availability for the logged-in user.
      description: Can only be used by logged-in users.
      operationId: createAvailability
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Availability"
      responses:
        "201":
          description: Availability created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Availability"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
    get:
      tags:
        - Availability
      summary: Get the logged-in seasonnal worker availabilities.
      description: Can only be used by logged-in users.
      operationId: getAvailabilities
      responses:
        "200":
          description: All Availabilities retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Availability"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
  /user/availability/{availabilityId}:
    patch:
      tags:
        - Availability
      summary: Update a availabilities of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: updateAvailability
      parameters:
        - $ref: "#/components/parameters/availabilityId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Availability"
      responses:
        "200":
          description: Availability updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Availability"
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Availability not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
    get:
      tags:
        - Availability
      summary: Get a availability of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: getAvailability
      parameters:
        - $ref: "#/components/parameters/availabilityId"
      responses:
        "200":
          description: Availability retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Availability"
        "401":
          description: User is not authenticated
        "404":
          description: Availability not found
    delete:
      tags:
        - Availability
      summary: Delete a availability of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: deleteMyProfileSingleAvailability
      parameters:
        - $ref: "#/components/parameters/availabilityId"
      responses:
        "200":
          description: Availability deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessfullyDeleted"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Reference not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
  # Reference
  /user/reference:
    post:
      tags:
        - Reference
      summary: Create a reference for the logged-in user.
      description: Can only be used by logged-in users.
      operationId: createReference
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reference"
      responses:
        "201":
          description: Reference created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reference"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
    get:
      tags:
        - Reference
      summary: Get the logged-in user references.
      description: Can only be used by logged-in users.
      operationId: getReferences
      responses:
        "200":
          description: References retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Reference"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
    patch:
      tags:
        - Reference
      summary: Update a reference of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: updateReference
      parameters:
        - $ref: "#/components/parameters/referenceId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reference"
      responses:
        "200":
          description: Reference updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reference"
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Reference not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
  /user/reference/{referenceId}:
    get:
      tags:
        - Reference
      summary: Get a reference of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: getReference
      parameters:
        - $ref: "#/components/parameters/referenceId"
      responses:
        "200":
          description: Reference retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Reference"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Reference not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
    delete:
      tags:
        - Reference
      summary: Delete a reference of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: deleteReference
      parameters:
        - $ref: "#/components/parameters/referenceId"
      responses:
        "200":
          description: Reference deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessfullyDeleted"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Reference not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
  # Experience
  /user/experience:
    post:
      tags:
        - Experience
      summary: Create an experience for the logged-in user.
      description: Can only be used by logged-in users.
      operationId: createExperience
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Experience"
      responses:
        "201":
          description: Experience created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Experience"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
    get:
      tags:
        - Experience
      summary: Get the logged-in user experiences.
      description: Can only be used by logged-in users.
      operationId: getExperiences
      responses:
        "200":
          description: Experiences retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Experience"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  /user/experience/{experienceId}:
    put:
      tags:
        - Experience
      summary: Update an experience of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: updateMyProfileSingleExperience
      parameters:
        - $ref: "#/components/parameters/experienceId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Experience"
      responses:
        "200":
          description: Experience updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Experience"
        "400":
          description: Invalid request payload
        "401":
          description: User is not authenticated
        "404":
          description: Experience not found
    get:
      tags:
        - Experience
      summary: Get an experience of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: getMyProfileSingleExperience
      parameters:
        - $ref: "#/components/parameters/experienceId"
      responses:
        "200":
          description: Experience retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Experience"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Experience not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
    delete:
      tags:
        - Experience
      summary: Delete an experience of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: deleteExperience
      parameters:
        - $ref: "#/components/parameters/experienceId"
      responses:
        "200":
          description: Experience deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessfullyDeleted"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Experience not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
  # FeedBack
  /user/feedback:
    get:
      tags:
        - Feedback
      summary: Get the logged-in user FeedBacks.
      description: Can only be used by logged-in users.
      operationId: getFeedBacks
      responses:
        "200":
          description: FeedBacks retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FeedBack"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
    post:
      tags:
        - Feedback
      summary: Create a FeedBack for the logged-in user.
      description: Can only be used by logged-in users.
      operationId: createFeedBackForRecruiter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeedBack"
      responses:
        "201":
          description: FeedBack created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedBack"
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
  /user/feedback/{feedbackId}:
    put:
      tags:
        - Feedback
      summary: Update a feedback of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: updateMyProfileSingleFeedback
      parameters:
        - $ref: "#/components/parameters/FeedBackId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FeedBack"
      responses:
        "200":
          description: FeedBack updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedBack"
        "400":
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: FeedBack not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"

        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
    get:
      tags:
        - Feedback
      summary: Get an FeedBack of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: getFeedBackById
      parameters:
        - $ref: "#/components/parameters/FeedBackId"
      responses:
        "200":
          description: FeedBack retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FeedBack"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: FeedBack not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
    delete:
      tags:
        - Feedback
      summary: Delete an FeedBack of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: deleteFeedBackById
      parameters:
        - $ref: "#/components/parameters/FeedBackId"
      responses:
        "200":
          description: FeedBack deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessfullyDeleted"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: FeedBack not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
  # Job Offers
  /job-offers:
    get:
      tags:
        - Job Offers
      summary: Get the job Offers.
      description: Can only be used by logged-in users.
      operationId: getJobOffers
      parameters:
        - in: query
          name: sortBy
          description: The strategy to use to sort the results.
          schema:
            type: string
            enum: [dateCreation, recommendation, approved, refused, pending]
            example: creation
            required:
              - sortBy
        - in: query
          name: onlyApplied
          description: Filter out job Offers that the logged-in user didn't apply for.
          schema:
            type: boolean
            example: true
      responses:
        "200":
          description: Job Offers retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/JobOffer"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "400":
          description: Invalid sortBy parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
  /job-offers/{jobOfferId}:
    get:
      tags:
        - Job Offers
      summary: Get a job offer.
      description: Can only be used by logged-in users.
      operationId: getJobOffer
      parameters:
        - $ref: "#/components/parameters/jobOfferId"
      responses:
        "200":
          description: Job offer retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobOffer"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Job offer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
  /job-offers/{jobOfferId}/apply:
    post:
      tags:
        - Job Offers
      summary: Apply to a job offer.
      description: Can only be used by logged-in users.
      operationId: applyToJobOffer
      parameters:
        - $ref: "#/components/parameters/jobOfferId"
      responses:
        "200":
          description: Job offer applied to successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobOffer"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Job offer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
  # Messaging
  /messaging/channels:
    get:
      tags:
        - Messaging
      summary: Get the channels of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: getChannels
      responses:
        "200":
          description: Channels retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Channel"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"

        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
  /messaging/channels/{channelId}/messages:
    get:
      tags:
        - Messaging
      summary: Get a messages of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: getSingleChannel
      parameters:
        - $ref: "#/components/parameters/channelId"
      responses:
        "200":
          description: Message channel retrieved successfully
          content:
            application/json:
              schema:
                type: array
                $ref: "#/components/schemas/Message"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Message channel not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
    post:
      tags:
        - Messaging
      summary: Send a message to a channel.
      description: Can only be used by logged-in users.
      operationId: sendMessage
      parameters:
        - $ref: "#/components/parameters/channelId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
      responses:
        "201":
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Message channel not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
  /messaging/channels/employer/{employerId}/messages:
    post:
      tags:
        - Messaging
      summary: Post a message to an employer.
      description: Can only be used by logged-in users.
      operationId: POstMessageToEmployer
      parameters:
        - $ref: "#/components/parameters/employerId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
      responses:
        "201":
          description: Message sent successfully to employer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Employer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
  # Notification
  /notifications:
    get:
      tags:
        - Notification
      summary: Get the notifications of the logged-in user.
      description: Can only be used by logged-in users.
      operationId: getAllNotifications
      responses:
        "200":
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TooManyRequestsError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
  # Job
  /jobs:
    get:
      tags:
        - Job
      summary: Get every known jobs.
      description: Can only be used by logged-in users.
      operationId: getAllJobs
      parameters:
        - in: query
          name: category
          description: The job category to filter the results by.
          schema:
            type: string
      responses:
        "200":
          description: Jobs retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Job"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
  /jobs/categories:
    get:
      tags:
        - Job
      summary: Get every known job categories.
      description: Can only be used by logged-in users.
      operationId: getAllJobCategories
      responses:
        "200":
          description: Job categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/JobCategory"
        "401":
          description: User is not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DefaultError"
  # Company
  /company:
    get:
      tags:
        - Company
      summary: Get every known companies.
      description: Can only be used by logged-in users.
      operationId: getAllCompanies
      responses:
        "200":
          description: Companies retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Company"
        "401":
          description: User is not authenticated
  /company/{companyId}:
    get:
      tags:
        - Company
      summary: Get a known company.
      description: Can only be used by logged-in users.
      operationId: getSingleCompany
      parameters:
        - $ref: "#/components/parameters/companyId"
      responses:
        "200":
          description: Company retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Company"
        "401":
          description: User is not authenticated
        "404":
          description: Company not found
components:
  securitySchemes:
    oAuthSecurity:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://api.indeed.com/oauth/authorize
          tokenUrl: https://api.indeed.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
            admin: Grants access to admin operations
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NotFoundError"
    TooManyRequestsError:
      description: Too many requests
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TooManyRequestsError"
    BadRequestError:
      description: Invalid request payload
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BadRequestError"
    DefaultError:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DefaultError"
  parameters:
    availabilityId:
      name: availabilityId
      in: path
      description: The id of the availability to retrieve
      required: true
      schema:
        type: string
        format: uuid
        maxLength: 50
        minLength: 5
        example: "99898-87866-FR"
        readOnly: true
        maximum: 1024
        minimum: 0
    referenceId:
      name: referenceId
      in: path
      description: The ID of the reference to retrieve
      required: true
      schema:
        type: string
        format: uuid
        maxLength: 50
        minLength: 5
        example: "99898-87866-FR"
        readOnly: true
        maximum: 1024
        minimum: 0
    experienceId:
      name: experienceId
      in: path
      description: The ID of the experience to retrieve
      required: true
      schema:
        type: string
        format: uuid
        maxLength: 50
        minLength: 5
        example: "99898-87866-FR"
        readOnly: true
        maximum: 1024
        minimum: 0
    FeedBackId:
      name: FeedBackId
      in: path
      description: The id of the FeedBack to retrieve
      required: true
      schema:
        type: string
        format: uuid
        maxLength: 50
        minLength: 5
        example: "99898-87866-FR"
        readOnly: true
        maximum: 1024
        minimum: 0
    jobId:
      name: jobId
      in: path
      description: The id of the job to retrieve
      required: true
      schema:
        type: string
        format: uuid
        maxLength: 50
        minLength: 5
        example: "99898-87866-FR"
        readOnly: true
        maximum: 1024
        minimum: 0
    employerId:
      name: employerId
      in: path
      description: The id of the employer to retrieve
      required: true
      schema:
        type: string
        format: uuid
        maxLength: 50
        minLength: 5
        example: "99898-87866-FR"
        readOnly: true
        maximum: 1024
        minimum: 0
    companyId:
      name: companyId
      in: path
      description: The id of the company to retrieve
      required: true
      schema:
        type: string
        format: uuid
        maxLength: 50
        minLength: 5
        example: "99898-87866-FR"
        readOnly: true
        maximum: 1024
        minimum: 0
    jobOfferId:
      name: jobOfferId
      in: path
      description: The id of the job offer to retrieve
      required: true
      schema:
        type: string
        format: uuid
        maxLength: 50
        minLength: 5
        example: "99898-87866-FR"
        readOnly: true
        maximum: 1024
        minimum: 0
    channelId:
      name: channelId
      in: path
      description: The id of the message channel to retrieve
      required: true
      schema:
        type: string
        format: uuid
        maxLength: 50
        minLength: 5
  schemas:
    NotFoundError:
      type: object
      properties:
        code:
          type: integer
          format: int32
          default: 404
        message:
          type: string
          example: Resource not found
    UnauthorizedError:
      type: object
      properties:
        code:
          type: integer
          format: int32
          default: 401
        message:
          type: string
          example: Access token is missing or invalid
    TooManyRequestsError:
      type: object
      properties:
        code:
          type: integer
          format: int32
          default: 429
        message:
          type: string
          example: Too many requests
    BadRequestError:
      type: object
      properties:
        code:
          type: integer
          format: int32
          default: 400
        message:
          type: string
          example: Invalid request payload
    DefaultError:
      type: object
      properties:
        code:
          type: integer
          format: int32
          default: 500
        message:
          type: string
          example: Unexpected error
    SuccessfullyUpdated:
      type: object
      properties:
        success:
          type: string
          example: Resource updated successfully
    SuccessfullyDeleted:
      type: object
      properties:
        success:
          type: string
          example: Resource deleted successfully
    SuccessfullyCreated:
      type: object
      properties:
        success:
          type: string
          example: Resource created successfully
    Benefit:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 1
          readOnly: true
        name:
          type: string
          example: Logement
        iconPath:
          type: string
          example: /icons/logement.png
    Availability:
      type: object
      properties:
        adId:
          type: string
          format: uuid
          maxLength: 50
          minLength: 5
          readOnly: true
        title:
          type: string
          example: Homme d'affaires
          minLength: 0
          maxLength: 255
        description:
          type: string
          example: |-
            Ceuillieur de champignons depuis 1972, je suis à la recherche d'un emploi saisonnier pour la saison 2024.
        category:
          type: string
          example: Paysan
        address:
          $ref: "#/components/schemas/Address"
        startDate:
          type: string
          format: date
          example: 2022-01-01
        endDate:
          type: string
          format: date
          example: 2022-01-01
        salary:
          type: integer
          format: int32
          example: 1000
        currency:
          type: string
          example: EUR
        benefit:
          type: array
          items:
            $ref: "#/components/schemas/Benefit"
        adType:
          type: string
          enum: [jobOffer, Availability]
          example: Availability
    Address:
      type: object
      properties:
        country:
          type: array
          example: France
        zipCode:
          type: string
          example: 04100
        city:
          type: string
          example: Manosque
    Company:
      type: object
      properties:
        id:
          type: string
          format: uuid
          maxLength: 50
          minLength: 5
          readOnly: true
        name:
          type: string
          example: Wonder
        address:
          $ref: "#/components/schemas/Address"
    Job:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 1
          readOnly: true
        title:
          type: string
          example: Homme d'affaires
          readOnly: true
        jobCategory:
          $ref: "#/components/schemas/JobCategory"
    JobCategory:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 7675-7675-7675
          readOnly: true
        title:
          type: string
          example: Hotelerie et restauration
          enum:
            - Hotelerie et restauration
            - Agriculture
            - Animateur de centre de loisirs
            - Montagne et Station de ski
            - Autre
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          maxLength: 50
          minLength: 5
          example: "99898-87866-FR"
          readOnly: true
        firstName:
          type: string
          example: Benoit
        lastName:
          type: string
          example: Morille
        gender:
          type: integer
          format: int8
          example: 1
        birthday:
          type: string
          format: date
          example: 1943-01-26
        nationality:
          type: string
          format: ISO 3166-1 alpha-3
          example: FRA
        address:
          $ref: "#/components/schemas/Address"
        phone:
          type: string
          format: phone
          example: "0695154879"
        email:
          type: string
          format: email
          example: benoit-morille@gmail.com
        description:
          type: string
          example: |-
            Ceuillieur de champignons depuis 1972, je suis à la recherche d'un emploi saisonnier pour la saison 2022.
        cv:
          type: string
          format: binary
          example: /cv/99898-87866-FR.pdf
        picture:
          type: string
          format: binary
          example: /cv/john-doe.jpg
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          maxLength: 50
          minLength: 5
          example: "99898-87866-FR"
          readOnly: true
        firstName:
          type: string
          example: Benoit
        lastName:
          type: string
          example: Morille
        gender:
          type: integer
          format: int8
          example: 1
        birthday:
          type: string
          format: date
          example: 1943-01-26
        nationality:
          type: string
          format: ISO 3166-1 alpha-3
          example: FRA
        address:
          $ref: "#/components/schemas/Address"
        phone:
          type: string
          format: phone
          example: "0695154879"
        email:
          type: string
          format: email
          example: benoit-morille@gmail.com
        description:
          type: string
          example: |-
            Ceuillieur de champignons depuis 1972, je suis à la recherche d'un emploi saisonnier pour la saison 2022.
        cvPath:
          type: string
          format: string
          example: /cv/99898-87866-FR.pdf
        picturePath:
          type: string
          format: string
          example: /cv/john-doe.jpg
        lastAuth:
          type: string
          format: date-time
          example: 2022-10-16T15:29:31Z
          readOnly: true
        hidden:
          type: boolean
          example: false
          readOnly: true
    Media:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 7675-7675-7675
          readOnly: true
        files:
          type: array
          format: binary
        media_type:
          type: string
          example: [cv, picture]
    Reference:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 7675-7675-7675
          readOnly: true
        firstName:
          type: string
          example: Jean Luc
        lastName:
          type: string
          example: Melenchon
        phone:
          type: string
          format: phone
          example: "0680459527"
        email:
          type: string
          format: email
          example: jean-luc@melenchon.fr
        company:
          $ref: "#/components/schemas/Company"
    Experience:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 7675-7675-7675
          readOnly: true
        startDate:
          type: string
          format: date
          example: 1986-02-28
        endDate:
          type: string
          format: date
          example: 1987-02-29
        company:
          $ref: "#/components/schemas/Company"
        category:
          $ref: "#/components/schemas/JobCategory"
    FeedBack:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 7675-7675-7675
          readOnly: true
        createdByUserId:
          type: string
          format: uuid
          example: 7675-7675-7675
          readOnly: true
        name:
          type: string
          example: François
        score:
          type: integer
          format: int8
          example: 5
        opinion:
          type: string
          example: Benoit est un employé modèle. Il cherche toujours à réussir, et cela peu importe la tâche.
        createdAt:
          type: string
          format: date-time
          example: 2022-10-16T15:29:31Z
        userType:
          type: string
          format: string
          enum: [seasonnal, recruiter]
          example: seasonnal
    JobOffer:
      type: object
      properties:
        adId:
          type: string
          format: uuid
          maxLength: 50
          minLength: 5
          readOnly: true
        title:
          type: string
          example: Homme d'affaires
          minLength: 0
          maxLength: 255
        description:
          type: string
          example: |-
            Ceuillieur de champignons depuis 1972, je suis à la recherche d'un emploi saisonnier pour la saison 2024.
        JobCategory:
          $ref: "#/components/schemas/JobCategory"
        category:
          type: string
          example: Paysan
          enum:
            - Paysan
            - Homme d'affaires
            - Autre
        address:
          $ref: "#/components/schemas/Address"
        startDate:
          type: string
          format: date
          example: 2022-01-01
        endDate:
          type: string
          format: date
          example: 2022-01-01
        salary:
          type: integer
          format: int32
          example: 1000
        currency:
          type: string
          example: EUR
        benefit:
          type: array
          items:
            $ref: "#/components/schemas/Benefit"
        adType:
          type: string
          enum: [jobOffer, Availability]
          example: jobOffer
    Channel:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 7675-7675-7675
          readOnly: true
    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 7675-7675-7675
          readOnly: true
        channelId:
          type: string
          format: uuid
          example: 7675-7675-7675
          readOnly: true
        source:
          type: string
          format: uuid
          example: 7675-7675-7675
          readOnly: true
        destination:
          type: string
          format: uuid
          example: 7675-7675-7675
          readOnly: true
        sentAt:
          type: string
          format: date-time
          example: 2023-10-23T09:34:19Z
          readOnly: true
        content:
          type: string
          example: Coucou, comment ça va ?
    Notification:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
          readOnly: true
        title:
          type: string
          example: Candidature refusée
          readOnly: true
        content:
          type: string
          example: Votre candidature à l'offre "Serveur à l'entrecôte" à été refusée par l'employeur.
          readOnly: true
        sentAt:
          type: string
          format: date-time
          example: 2023-10-23T09:34:19Z
          readOnly: true
security:
  - oAuthSecurity: []
